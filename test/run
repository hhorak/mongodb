#!/bin/bash
#
# Test the MongoDB image.
#
# IMAGE_NAME specifies a name of the candidate image used for testing.
# The image has to be available before this script is executed.
#

# shellcheck source=/dev/null
source "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"/test-lib.sh
source "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"/test-lib-mongodb.sh

TEST_LIST="\
ctest_container_creation
ctest_configuration
ctest_general
ctest_change_password
ctest_mount_config
ctest_doc_content
ctest_local_replication
ctest_s2i
ctest_ssl"

if test $VERSION_NUM -ge 32; then
    TEST_LIST="${TEST_LIST}
ctest_WT_cache"
fi

volumes_to_clean=

function ct_cleanup_extra() {
  local network_name="mongodb-replset-$$"
  ! docker network ls | grep -q ${network_name} || docker network rm ${network_name}

  ct_path_foreach "$volumes_to_clean" cleanup_volume_dir
}

cleanup_volume_dir ()
{
  test ! -d "$1" && : "WARN: cleaned $1 for some reason" && return 0
  # When we run this test script as non-root (we should?), the MongoDB server
  # within container is still run under 'mongodb' user.  It means that we are
  # unable to remove files created by server.  That's why we need to let docker
  # escalate the privileges again.
  local datadir=/var/lib/mongodb/data
  docker run -v "$1:$datadir:z" --rm "$IMAGE_NAME" /bin/sh -c "/bin/rm -rf $datadir/*"
  rmdir "$1"
}

ct_init
# shellcheck disable=SC2086
ct_run_all_tests $@
ct_finish

